/* Reflection.txt for COMP103
 * Name: David Barnett
 * Usercode: 300313764
 * ID: barnetdavi
 */

For your reflection:
====================

Firstly, describe how far you got, on this assignment. If there was a problem
you got stuck on, what was that problem?

Reading and understanding someone else's code is difficult.  What elements of
Sokoban made it easier or made it  more difficult for you to understand?  Can
you identify things that you would do or avoid doing if you were trying to make
your own code easily understood by someone else?

What is the point of comparators?  Why are they necessary in general? Could you
suggest an alternative way of solving the same problems that didn't involve
having to make these additional classes?

--------------------------------------------------------------------

Sokoban : implemented undo and path finding. Had some trouble with the conversion between
	x,y coordinates and cols,rows for getting the Square objects.

Molecule Renderer : implemented everything up to challenge with little  or no problem.
	From the challenge list only preservative, zooming and keyboard controls was implemented.
	The only trouble coming from trying to get constant values in the preservative rendering 
	to look natural.

When reading through the given Sokoban code, the use of comments above functions
made it very easy to understand what each section did. The main source of confusion was
the how the Squares array was sorted by row,col. 
From this I would try to add more comments/documentation and avoid extremely in-line stacked
code that would make no sense to anyone.

The point of a comparator is to be able to define what is greater, lesser or equal with two objects.
This would allow for sorting user-defined classes or non-standard ways of sorting built-in classes.
The alternative to having a Comparator class would be moving the interface into the Object class
so every class has a chance to override how it is compared, but this would not allow for multiple ways
to sort the same list. 